# 定义请求限制区域
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=user_limit:10m rate=5r/s;
limit_req_zone $binary_remote_addr zone=python_limit:10m rate=5r/s;
limit_req_zone $binary_remote_addr zone=translation_limit:10m rate=3r/s;
limit_req_zone $binary_remote_addr zone=admin_limit:10m rate=2r/s;

# 文章页 SSR 服务 upstream
upstream article_ssr {
    server poetize-article-ssr:3000;
    keepalive 16;
}

# 添加map指令用于解析请求URI，提取文章ID、分类ID等
map $request_uri $article_id {
    ~^/article/([0-9]+)$ $1;
    default "";
}

map $request_uri $category_id {
    ~^/category/([0-9]+)$ $1;
    default "";
}

map $request_uri $tag_id {
    ~^/tag/([0-9]+)$ $1;
    default "";
}

server {
    listen 80;
    server_name example.com www.example.com;
    
    # 将HTTP请求重定向到HTTPS
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    listen 443 quic reuseport;
    http2 on;  # 显式启用HTTP/2
    http3 on;  # 启用HTTP/3
    server_name example.com www.example.com;
    
    # 设置访问日志路径
    access_log /var/log/nginx/access.log main;
    
    # 设置默认字符集
    charset utf-8;
    
    # SSL证书配置
    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/example.com/chain.pem;
    
    # SSL设置
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    
    # 告诉客户端支持HTTP/3
    add_header Alt-Svc 'h3=":443"; ma=86400';
    
    # HSTS (ngx_http_headers_module is required) (63072000 seconds)
    add_header Strict-Transport-Security "max-age=63072000" always;
    
    # 添加更多安全头信息
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' *.jsdelivr.net cdn.jsdelivr.net *.cloudflare.com cdnjs.cloudflare.com; style-src 'self' 'unsafe-inline' *.jsdelivr.net *.cloudflare.com cdnjs.cloudflare.com fonts.googleapis.com; img-src 'self' data: blob: *; font-src 'self' data: *.jsdelivr.net *.cloudflare.com cdnjs.cloudflare.com fonts.googleapis.com fonts.gstatic.com; connect-src 'self' *;" always;
    
    # 防止点击劫持
    add_header X-Frame-Options "SAMEORIGIN";
    
    # 限制请求大小，防止DoS攻击
    client_max_body_size 10M;

    # 启用Brotli压缩 - 比GZIP更高效的压缩算法
    brotli on;
    brotli_comp_level 4;
    brotli_static off;
    brotli_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript application/x-font-ttf application/x-font-opentype application/font-woff application/font-woff2 font/woff2 image/svg+xml;
    
    # OCSP Stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # 启用GZIP压缩，但避免对已加密内容进行压缩
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 4;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript application/x-font-ttf application/x-font-opentype application/font-woff application/font-woff2 font/woff2 image/svg+xml;
    
    # 添加缓存控制头，防止浏览器缓存损坏的JS文件
    add_header Cache-Control "no-cache, no-store, must-revalidate" always;
    add_header Pragma "no-cache" always;
    add_header Expires "0" always;
    
    # 内部代理location - 仅供内部请求使用
    location /internal_proxy/ {
        internal;
        # 移除/internal_proxy前缀
        rewrite ^/internal_proxy(/.*)$ $1 break;
        proxy_pass http://poetize-python:5000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # 先匹配文章详情页，交由 Node SSR 处理
    location ~ ^/article/[0-9]+$ {
        proxy_pass http://article_ssr;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_next_upstream error timeout http_502 http_503 http_504;
        proxy_intercept_errors on;
        error_page 502 503 504 = /index.html;
    }
    
    # 主站前端
    location / {
        root /usr/share/nginx/html/poetize;
        index index.html;
        
        # 开启SSI处理
        ssi on;
        ssi_silent_errors on;
        
        # 在访问阶段统一处理SEO信息
        access_by_lua_file /etc/nginx/lua/seo_access.lua;
        
        # 用于在模板中插入完整的头部信息
        header_filter_by_lua_file /etc/nginx/lua/seo_header_filter.lua;
        
        body_filter_by_lua_file   /etc/nginx/lua/seo_body_filter.lua;
        
        try_files $uri $uri/ /index.html;

        # Live2D资源预加载 - 使用JavaScript preload代替http2_push
        # 注：HTTP/3不支持Server Push，改用<link rel="preload">方式
        location = /index.html {
            root /usr/share/nginx/html/poetize;
            add_header Link '</static/live2d-widget/dist/live2d.min.js>; rel=preload; as=script';
            add_header Link '</static/live2d-widget/dist/waifu.css>; rel=preload; as=style';
            add_header Link '</static/live2d_api/model_list.json>; rel=preload; as=fetch; crossorigin=anonymous';
        }
    }

    # Let's Encrypt验证
    location /.well-known/acme-challenge/ {
        root /usr/share/nginx/html;
        allow all;
    }

    # 聊天室前端
    location /im {
        alias /usr/share/nginx/html/im;
        index index.html;
        
        # 开启SSI处理
        ssi on;
        ssi_silent_errors on;
        
        # 在访问阶段处理IM聊天室SEO信息
        access_by_lua_file /etc/nginx/lua/im_seo_access.lua;
        
        # 用于在模板中插入完整的头部信息
        header_filter_by_lua_file /etc/nginx/lua/seo_header_filter.lua;

        body_filter_by_lua_file /etc/nginx/lua/im_seo_body_filter.lua;
        
        try_files $uri $uri/ /im/index.html;
    }

    # assets目录 - 直接指向static/assets
    location /assets/ {
        alias /usr/share/nginx/html/poetize/static/assets/;
        expires 30d;
        add_header Cache-Control "public, no-transform";
    }

    # 静态资源 - 同时尝试从poetize目录直接找，或从poetize/static子目录找
    location /static {
        try_files $uri @fallback_static;
        expires 30d;
        add_header Cache-Control "public, no-transform";
    }

    # 为特定的chunk JS文件添加特殊处理
    location ~* chunk-.*\.js$ {
        root /usr/share/nginx/html/poetize;
        # 设置正确的MIME类型
        types { application/javascript js; }
        # 禁用压缩
        gzip off;
        brotli off;
        # 禁用缓存以确保总是获取最新版本
        expires -1;
        add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0" always;
        add_header Pragma "no-cache" always;
        # 记录详细的访问日志用于调试
        access_log /var/log/nginx/chunk_debug.log main;
    }

    # Live2D模型和相关资源 - 专门优化Live2D资源的缓存
    location /static/live2d_api/ {
        root /usr/share/nginx/html/poetize;
        expires max;  # 使用最长缓存时间，因为模型文件很少变化
        add_header Cache-Control "public, max-age=31536000, immutable";
        
        # 配置跨域
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods 'GET, OPTIONS';
        
        # 特别优化model_list.json的缓存
        location ~ model_list\.json$ {
            expires 1d;  # 模型列表可能会更新，使用较短的缓存时间
            add_header Cache-Control "public, max-age=86400";
        }
        
        # 禁用access_log以减少磁盘IO
        access_log off;
    }
    
    # Live2D小部件JS和CSS资源
    location /static/live2d-widget/ {
        root /usr/share/nginx/html/poetize;
        expires 7d;  # 一周的缓存时间
        add_header Cache-Control "public, max-age=604800";
        
        # 禁用access_log以减少磁盘IO
        access_log off;
    }
    # 静态资源回退路径
    location @fallback_static {
        root /usr/share/nginx/html/poetize;
        expires 30d;
        add_header Cache-Control "public, no-transform";
    }

    # 站点地图和robots.txt文件
    location /sitemap.xml {
        alias /app/data/sitemap.xml;
    }
    
    location /robots.txt {
        alias /app/data/robots.txt;
    }

    # Java后端API
    location /api/ {
        # 增加请求速率限制，防止暴力攻击
        limit_req zone=api_limit burst=20 nodelay;
        
        proxy_pass http://poetize-java:8081/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # WebSocket支持
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_read_timeout 300s;
        proxy_send_timeout 300s;
    }
    
    # Java后端用户相关API
    location /user/ {
        # 增加更严格的请求速率限制，防止暴力破解登录
        limit_req zone=user_limit burst=5 nodelay;
        
        proxy_pass http://poetize-java:8081/user/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_http_version 1.1;
        proxy_read_timeout 300s;
        proxy_send_timeout 300s;
    }

    location /socket {
        proxy_pass          http://poetize-java:9324;
        proxy_http_version  1.1;
        proxy_set_header    Upgrade $http_upgrade;
        proxy_set_header    Connection "upgrade";
        proxy_read_timeout  600s;
    }

    # Python后端API
    location /python/ {
        # 增加请求速率限制，防止暴力攻击
        limit_req zone=python_limit burst=10 nodelay;
        
        proxy_pass http://poetize-python:5000/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    
    # 清理SEO缓存接口，后台修改SEO配置后调用
    location = /flush_seo_cache {
        allow all;
        
        content_by_lua_block {
            local seo_cache = ngx.shared.seo_cache
            seo_cache:flush_all()
            ngx.say("seo cache flushed")
        }
    }
} 